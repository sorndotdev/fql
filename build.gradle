plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id 'antlr'
}

apply plugin: dev.sorn.fql.CoveragePlugin

group = 'dev.sorn.fql'
version = projectVersion

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.13.2"
    implementation "org.antlr:antlr4-runtime:4.13.2"
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    finalizedBy jacocoTestReport
}

tasks.withType(Jar).configureEach {
    manifest.attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': project.group
    )
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

checkstyle {
    toolVersion = checkstyleVersion
    configDirectory = file("${rootDir}/config/checkstyle")
    ignoreFailures = false
    maxWarnings = 0
}

check.dependsOn tasks.checkstyleMain, tasks.checkstyleTest

tasks.withType(Checkstyle).configureEach {
    exclude '**/generated-sources/**'
    exclude '**/generated/**'
    exclude '**/module-info.java'
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            'dev/sorn/fql/generated/**'
                    ])
                })
        )
    }
}

sourceSets {
    main {
        antlr {
            srcDirs = ['src/main/resources/grammar']
        }
        java {
            srcDirs = [
                    'src/main/java',
                    "${buildDir}/generated-sources"
            ]
        }
    }
}

clean {
    delete "${buildDir}/generated-sources"
}

generateGrammarSource {
    arguments += [
            "-package", "dev.sorn.fql.generated.antlr",
            "-listener",
            "-visitor"
    ]
    outputDirectory = file("${buildDir}/generated-sources")
}

tasks.named('compileJava') {
    dependsOn generateGrammarSource
}

tasks.named('sourcesJar') {
    dependsOn generateGrammarSource
    from sourceSets.main.allSource
}

tasks.withType(Javadoc).configureEach {
    exclude fileTree("${buildDir}/generated-sources/**")
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.named('javadocJar') {
    dependsOn tasks.javadoc
    from tasks.javadoc
}